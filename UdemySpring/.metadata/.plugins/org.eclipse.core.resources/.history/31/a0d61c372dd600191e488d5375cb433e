package com.developerblog.app.ws.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.validation.Valid;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.developerblog.app.ws.model.UserModel;
import com.developerblog.app.ws.model.UserResponseModel;

@RestController
@RequestMapping("/users") // http://localhost:2222/users/

public class UserController {
	private Map<String,UserModel> userModelMap;
	
	@GetMapping
	public String getUsers(@RequestParam(value="page",defaultValue="1") int page,@RequestParam(value="limit",defaultValue="50") int limit) {
		return "get Users was called "+page+"  and limit "+limit;
	}
	@GetMapping(path="/{userId}",produces= {MediaType.APPLICATION_XML_VALUE,MediaType.APPLICATION_JSON_VALUE})
	public ResponseEntity<UserModel> getUser(@PathVariable String userId) {
		if(userModelMap.containsKey(userId)) {
			return new ResponseEntity<UserModel>(userModelMap.get(userId), HttpStatus.OK);
		}else {
			return new ResponseEntity<UserModel>(HttpStatus.NO_CONTENT);
		}
		
	}

	@PostMapping(consumes= {MediaType.APPLICATION_XML_VALUE,MediaType.APPLICATION_JSON_VALUE},produces= {MediaType.APPLICATION_XML_VALUE,MediaType.APPLICATION_JSON_VALUE})
	public ResponseEntity<UserModel> createUser(@Valid @RequestBody UserResponseModel userDetails ) {

		UserModel model = new UserModel();
		model.setFirstName(userDetails.getFirstName());
		model.setLastName(userDetails.getLastName());
		model.setEmail(userDetails.getEmail());
		String userId=UUID.randomUUID().toString();
		if(userModelMap==null)
			userModelMap = new HashMap<>();
		model.setEmail(userId);
			userModelMap.put(userId, model);
		return new ResponseEntity<UserModel>(model, HttpStatus.OK);

	}

	@PutMapping
	public String updateUser() {

		return "update User was called";

	}
	@DeleteMapping
	public String deleteUser() {

		return "Delete User was called";

	}
}
